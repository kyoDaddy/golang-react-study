{"ast":null,"code":"var _jsxFileName = \"/Users/kyou-hokim/Workspace/golang/golang-react/source-front/src/components/GraphQL.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class GraphQL extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: [],\n      isLoaded: false,\n      error: null,\n      alert: {\n        type: \"d-none\",\n        message: \"\"\n      }\n    };\n  }\n\n  componentDidMount() {\n    const payload = `\n        {\n            list {\n                id\n                title\n                runtime\n                year\n                description\n            }\n        }\n        `;\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    const requestOptions = {\n      method: \"POST\",\n      body: payload,\n      headers: myHeaders\n    };\n    fetch(\"http://localhost:4000/v1/graphql/list\", requestOptions).then(response => response.json()).then(data => {\n      let theList = Object.values(data.data.list);\n      return theList;\n    }).then(theList => {\n      setTimeout(() => {\n        this.setState({\n          movies: theList\n        });\n        console.log(this.state.movies);\n      }, 1000);\n    });\n  }\n\n  render() {\n    let {\n      movies\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"GraphQL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-group\",\n        children: movies.map(m => {\n          /*#__PURE__*/\n          _jsxDEV(\"a\", {\n            className: \"list-group-item list-group-item-action\",\n            href: \"#!\",\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: m.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }, this)\n          }, m.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 23\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/kyou-hokim/Workspace/golang/golang-react/source-front/src/components/GraphQL.js"],"names":["React","Component","Fragment","GraphQL","constructor","props","state","movies","isLoaded","error","alert","type","message","componentDidMount","payload","myHeaders","Headers","append","requestOptions","method","body","headers","fetch","then","response","json","data","theList","Object","values","list","setTimeout","setState","console","log","render","map","m","title","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAGA,eAAe,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AAC3CG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,EADC;AAETC,MAAAA,QAAQ,EAAE,KAFD;AAGTC,MAAAA,KAAK,EAAE,IAHE;AAITC,MAAAA,KAAK,EAAE;AACHC,QAAAA,IAAI,EAAE,QADH;AAEHC,QAAAA,OAAO,EAAE;AAFN;AAJE,KAAb;AASH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,OAAO,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAVQ;AAYA,UAAMC,SAAS,GAAG,IAAIC,OAAJ,EAAlB;AACAD,IAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AAEA,UAAMC,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,IAAI,EAAEN,OAFa;AAGnBO,MAAAA,OAAO,EAAEN;AAHU,KAAvB;AAMAO,IAAAA,KAAK,CAAC,uCAAD,EAA0CJ,cAA1C,CAAL,CACKK,IADL,CACWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADxB,EAEKF,IAFL,CAEWG,IAAD,IAAU;AACZ,UAAIC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcH,IAAI,CAACA,IAAL,CAAUI,IAAxB,CAAd;AACA,aAAOH,OAAP;AACH,KALL,EAMKJ,IANL,CAMWI,OAAD,IAAa;AACfI,MAAAA,UAAU,CAAC,MAAM;AACb,aAAKC,QAAL,CAAc;AACVzB,UAAAA,MAAM,EAAEoB;AADE,SAAd;AAGAM,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAK5B,KAAL,CAAWC,MAAvB;AACH,OALS,EAKP,IALO,CAAV;AAQH,KAfL;AAiBH;;AAED4B,EAAAA,MAAM,GAAG;AACL,QAAI;AAAC5B,MAAAA;AAAD,QAAW,KAAKD,KAApB;AAEA,wBACI,QAAC,QAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,kBACKC,MAAM,CAAC6B,GAAP,CAAYC,CAAD,IAAO;AACf;AAAA;AAEE,YAAA,SAAS,EAAC,wCAFZ;AAGE,YAAA,IAAI,EAAC,IAHP;AAAA,mCAIM;AAAA,wBAASA,CAAC,CAACC;AAAX;AAAA;AAAA;AAAA;AAAA;AAJN,aACOD,CAAC,CAACE,EADT;AAAA;AAAA;AAAA;AAAA;AAMH,SAPA;AADL;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAiBH;;AA3E0C","sourcesContent":["import React, { Component, Fragment } from \"react\";\n\n\nexport default class GraphQL extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            movies: [],\n            isLoaded: false,\n            error: null,\n            alert: {\n                type: \"d-none\",\n                message: \"\",\n            }\n        }\n    }\n\n    componentDidMount() {\n        const payload = `\n        {\n            list {\n                id\n                title\n                runtime\n                year\n                description\n            }\n        }\n        `;\n\n        const myHeaders = new Headers();\n        myHeaders.append(\"Content-Type\", \"application/json\");\n\n        const requestOptions = {\n            method: \"POST\",\n            body: payload,\n            headers: myHeaders,\n        }\n\n        fetch(\"http://localhost:4000/v1/graphql/list\", requestOptions)\n            .then((response) => response.json())\n            .then((data) => {\n                let theList = Object.values(data.data.list);\n                return theList;\n            })\n            .then((theList) => {\n                setTimeout(() => {         \n                    this.setState({          \n                        movies: theList,  \n                    });\n                    console.log(this.state.movies);\n                }, 1000); \n\n                \n            })\n\n    }\n\n    render() {\n        let {movies} = this.state;\n\n        return (\n            <Fragment>\n              <h2>GraphQL</h2>\n              <hr />\n              <div className=\"list-group\">\n                  {movies.map((m) => {\n                      <a \n                        key={m.id}\n                        className=\"list-group-item list-group-item-action\"\n                        href=\"#!\">\n                            <strong>{m.title}</strong>\n                        </a>\n                  })}\n              </div>\n\n            </Fragment>\n          );\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}